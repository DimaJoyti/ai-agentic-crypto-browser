# Infrastructure Deployment Workflow
# 
# Required Setup:
# 1. Create GitHub Environments: dev, staging, prod (Settings > Environments)
# 2. Add GitHub Secrets (Settings > Secrets and variables > Actions):
#    - AWS_ACCESS_KEY_ID: AWS access key for dev/staging
#    - AWS_SECRET_ACCESS_KEY: AWS secret key for dev/staging
#    - AWS_ACCESS_KEY_ID_PROD: AWS access key for production (separate account recommended)
#    - AWS_SECRET_ACCESS_KEY_PROD: AWS secret key for production
#    - SLACK_WEBHOOK_URL: Optional Slack webhook for notifications
# 3. Ensure Terraform backend is configured in terraform/environments/*/main.tf
# 4. Create Kustomize overlays in k8s/overlays/ for each environment
#
name: Infrastructure Deployment

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  # Terraform Plan/Apply for Development
  terraform-dev:
    name: Terraform Dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    # environment: dev  # Create 'dev' environment in GitHub repository settings with required secrets
    defaults:
      run:
        working-directory: terraform/environments/dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Add these secrets to GitHub repository settings > Secrets and variables > Actions
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -no-color 2>&1 | tee plan_output.txt
          echo "stdout=$(cat plan_output.txt | base64 -w 0)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            $(echo '${{ steps.plan.outputs.stdout }}' | base64 -d)
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
        run: terraform apply tfplan

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy -out=destroy-plan
          terraform apply destroy-plan

  # Terraform Plan/Apply for Staging
  terraform-staging:
    name: Terraform Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    # environment: staging  # Create 'staging' environment in GitHub repository settings with required secrets
    defaults:
      run:
        working-directory: terraform/environments/staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Add these secrets to GitHub repository settings > Secrets and variables > Actions
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy -out=destroy-plan
          terraform apply destroy-plan

  # Terraform Plan/Apply for Production
  terraform-prod:
    name: Terraform Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    # environment: prod  # Create 'prod' environment in GitHub repository settings with required secrets
    defaults:
      run:
        working-directory: terraform/environments/prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Add separate production secrets to GitHub repository settings
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Manual Approval Required
        if: github.event.inputs.action == 'apply'
        run: |
          echo "⚠️  Production deployment requires manual approval"
          echo "Please review the plan carefully before proceeding"

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "⚠️  Production destruction requires manual approval"
          terraform plan -destroy -out=destroy-plan
          terraform apply destroy-plan

  # Kubernetes Validation
  k8s-validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate Dev Manifests
        run: |
          if [ -d "k8s/overlays/dev" ]; then
            kustomize build k8s/overlays/dev > /dev/null
          else
            echo "Dev overlay directory not found, skipping validation"
          fi

      - name: Validate Staging Manifests
        run: |
          if [ -d "k8s/overlays/staging" ]; then
            kustomize build k8s/overlays/staging > /dev/null
          else
            echo "Staging overlay directory not found, skipping validation"
          fi

      - name: Validate Production Manifests
        run: |
          if [ -d "k8s/overlays/prod" ]; then
            kustomize build k8s/overlays/prod > /dev/null
          else
            echo "Production overlay directory not found, skipping validation"
          fi

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Validate Helm Charts
        run: |
          helm lint k8s/helm/ai-crypto-browser
          helm template ai-crypto-browser k8s/helm/ai-crypto-browser --values k8s/helm/ai-crypto-browser/values.yaml > /dev/null
          helm template ai-crypto-browser k8s/helm/ai-crypto-browser --values k8s/helm/ai-crypto-browser/values-staging.yaml > /dev/null
          helm template ai-crypto-browser k8s/helm/ai-crypto-browser --values k8s/helm/ai-crypto-browser/values-production.yaml > /dev/null

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Notify on completion
  notify:
    name: Notify Infrastructure Status
    runs-on: ubuntu-latest
    needs: [k8s-validate, security-scan]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          channel: '#infrastructure'
          text: "Infrastructure workflow completed with status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}"
        env:
          # Add SLACK_WEBHOOK_URL secret to GitHub repository settings for notifications
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
