name: Deploy to Cloudflare

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  # Determine environment based on branch
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project-name: ${{ steps.env.outputs.project-name }}
      api-url: ${{ steps.env.outputs.api-url }}
      ws-url: ${{ steps.env.outputs.ws-url }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "project-name=ai-agentic-crypto-browser" >> $GITHUB_OUTPUT
            echo "api-url=https://api.your-domain.com" >> $GITHUB_OUTPUT
            echo "ws-url=wss://api.your-domain.com" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "project-name=ai-agentic-crypto-browser-staging" >> $GITHUB_OUTPUT
            echo "api-url=https://api-staging.your-domain.com" >> $GITHUB_OUTPUT
            echo "ws-url=wss://api-staging.your-domain.com" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "project-name=ai-agentic-crypto-browser-dev" >> $GITHUB_OUTPUT
            echo "api-url=https://api-dev.your-domain.com" >> $GITHUB_OUTPUT
            echo "ws-url=wss://api-dev.your-domain.com" >> $GITHUB_OUTPUT
          fi

  # Test and lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run linting
        working-directory: ./web
        run: npm run lint

      - name: Run type checking
        working-directory: ./web
        run: npm run type-check

  # Deploy database migrations
  deploy-database:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Run database migrations
        working-directory: ./cloudflare/database
        run: |
          DB_NAME="ai-crypto-browser-db"
          if [[ "${{ needs.setup.outputs.environment }}" != "production" ]]; then
            DB_NAME="ai-crypto-browser-db-${{ needs.setup.outputs.environment }}"
          fi

          wrangler d1 execute $DB_NAME --file=./migrations/001_initial_schema.sql || true
          wrangler d1 execute $DB_NAME --file=./migrations/002_trading_tables.sql || true
          wrangler d1 execute $DB_NAME --file=./migrations/003_ai_analytics_tables.sql || true
          wrangler d1 execute $DB_NAME --file=./migrations/004_user_preferences.sql || true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # Deploy Workers
  deploy-workers:
    runs-on: ubuntu-latest
    needs: [setup, test, deploy-database]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Install Worker dependencies
        working-directory: ./cloudflare/workers/api
        run: npm ci

      - name: Deploy API Worker
        working-directory: ./cloudflare/workers/api
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            wrangler deploy --env production
          elif [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            wrangler deploy --env staging
          else
            wrangler deploy --env development
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # Deploy Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [setup, test, deploy-workers]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build application
        working-directory: ./web
        run: npm run build:cloudflare
        env:
          NODE_ENV: production
          NEXT_PUBLIC_CLOUDFLARE_DEPLOYMENT: true
          NEXT_PUBLIC_API_URL: ${{ needs.setup.outputs.api-url }}
          NEXT_PUBLIC_WS_URL: ${{ needs.setup.outputs.ws-url }}
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ needs.setup.outputs.project-name }}
          directory: web/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Post-deployment verification
  verify-deployment:
    runs-on: ubuntu-latest
    needs: [setup, deploy-frontend]
    if: github.event_name == 'push'
    steps:
      - name: Verify frontend deployment
        run: |
          sleep 30  # Wait for deployment to propagate

          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            FRONTEND_URL="https://ai-agentic-crypto-browser.pages.dev"
          elif [[ "${{ needs.setup.outputs.environment }}" == "staging" ]]; then
            FRONTEND_URL="https://ai-agentic-crypto-browser-staging.pages.dev"
          else
            FRONTEND_URL="https://ai-agentic-crypto-browser-dev.pages.dev"
          fi

          echo "Testing frontend at: $FRONTEND_URL"
          curl -f -s "$FRONTEND_URL" > /dev/null || echo "Frontend not ready yet"

      - name: Verify API deployment
        run: |
          API_URL="${{ needs.setup.outputs.api-url }}"
          echo "Testing API at: $API_URL/health"
          curl -f -s "$API_URL/health" > /dev/null || echo "API not ready yet"
