package framework

import (
	"context"
	"time"

	"github.com/ai-agentic-browser/internal/exchanges/common"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Strategy defines the interface for all trading strategies
type Strategy interface {
	// Lifecycle management
	Initialize(ctx context.Context, config StrategyConfig) error
	Start(ctx context.Context) error
	Stop(ctx context.Context) error
	IsRunning() bool

	// Strategy identification
	GetID() uuid.UUID
	GetName() string
	GetDescription() string
	GetVersion() string

	// Signal generation
	OnMarketData(ctx context.Context, data *MarketData) ([]*Signal, error)
	OnOrderUpdate(ctx context.Context, update *OrderUpdate) error
	OnPositionUpdate(ctx context.Context, update *PositionUpdate) error

	// Configuration and parameters
	GetParameters() map[string]Parameter
	SetParameter(name string, value interface{}) error
	ValidateParameters() error

	// Performance and metrics
	GetMetrics() *StrategyMetrics
	GetPositions() []*Position
	GetOrders() []*Order

	// Risk management
	GetRiskLimits() *RiskLimits
	SetRiskLimits(limits *RiskLimits) error
}

// StrategyConfig contains strategy configuration
type StrategyConfig struct {
	ID          uuid.UUID              `json:"id"`
	Name        string                 `json:"name"`
	Enabled     bool                   `json:"enabled"`
	Symbols     []string               `json:"symbols"`
	Exchanges   []string               `json:"exchanges"`
	Parameters  map[string]interface{} `json:"parameters"`
	RiskLimits  *RiskLimits           `json:"risk_limits"`
	Metadata    map[string]interface{} `json:"metadata"`
}

// MarketData represents market data for strategy processing
type MarketData struct {
	Type      MarketDataType         `json:"type"`
	Symbol    string                 `json:"symbol"`
	Exchange  string                 `json:"exchange"`
	Timestamp time.Time              `json:"timestamp"`
	Data      interface{}            `json:"data"`
}

// MarketDataType represents the type of market data
type MarketDataType string

const (
	MarketDataTypeTicker    MarketDataType = "ticker"
	MarketDataTypeOrderBook MarketDataType = "orderbook"
	MarketDataTypeTrade     MarketDataType = "trade"
	MarketDataTypeKline     MarketDataType = "kline"
)

// Signal represents a trading signal generated by a strategy
type Signal struct {
	ID          uuid.UUID              `json:"id"`
	StrategyID  uuid.UUID              `json:"strategy_id"`
	Type        SignalType             `json:"type"`
	Symbol      string                 `json:"symbol"`
	Side        common.OrderSide       `json:"side"`
	Strength    decimal.Decimal        `json:"strength"`    // 0.0 to 1.0
	Confidence  decimal.Decimal        `json:"confidence"`  // 0.0 to 1.0
	Price       decimal.Decimal        `json:"price"`
	Quantity    decimal.Decimal        `json:"quantity"`
	StopLoss    decimal.Decimal        `json:"stop_loss,omitempty"`
	TakeProfit  decimal.Decimal        `json:"take_profit,omitempty"`
	TimeInForce common.TimeInForce     `json:"time_in_force"`
	Metadata    map[string]interface{} `json:"metadata"`
	CreatedAt   time.Time              `json:"created_at"`
	ExpiresAt   time.Time              `json:"expires_at,omitempty"`
}

// SignalType represents the type of trading signal
type SignalType string

const (
	SignalTypeBuy         SignalType = "buy"
	SignalTypeSell        SignalType = "sell"
	SignalTypeClose       SignalType = "close"
	SignalTypeCloseAll    SignalType = "close_all"
	SignalTypeAdjustStop  SignalType = "adjust_stop"
	SignalTypeAdjustLimit SignalType = "adjust_limit"
)

// OrderUpdate represents an order status update
type OrderUpdate struct {
	OrderID     string                 `json:"order_id"`
	StrategyID  uuid.UUID              `json:"strategy_id"`
	Symbol      string                 `json:"symbol"`
	Side        common.OrderSide       `json:"side"`
	Status      common.OrderStatus     `json:"status"`
	FilledQty   decimal.Decimal        `json:"filled_qty"`
	AvgPrice    decimal.Decimal        `json:"avg_price"`
	Commission  decimal.Decimal        `json:"commission"`
	Timestamp   time.Time              `json:"timestamp"`
	Metadata    map[string]interface{} `json:"metadata"`
}

// PositionUpdate represents a position update
type PositionUpdate struct {
	StrategyID    uuid.UUID       `json:"strategy_id"`
	Symbol        string          `json:"symbol"`
	Side          string          `json:"side"`
	Size          decimal.Decimal `json:"size"`
	EntryPrice    decimal.Decimal `json:"entry_price"`
	CurrentPrice  decimal.Decimal `json:"current_price"`
	UnrealizedPnL decimal.Decimal `json:"unrealized_pnl"`
	RealizedPnL   decimal.Decimal `json:"realized_pnl"`
	Timestamp     time.Time       `json:"timestamp"`
}

// Parameter represents a strategy parameter
type Parameter struct {
	Name         string      `json:"name"`
	Type         ParamType   `json:"type"`
	Value        interface{} `json:"value"`
	DefaultValue interface{} `json:"default_value"`
	MinValue     interface{} `json:"min_value,omitempty"`
	MaxValue     interface{} `json:"max_value,omitempty"`
	Description  string      `json:"description"`
	Required     bool        `json:"required"`
}

// ParamType represents parameter types
type ParamType string

const (
	ParamTypeString  ParamType = "string"
	ParamTypeInt     ParamType = "int"
	ParamTypeFloat   ParamType = "float"
	ParamTypeBool    ParamType = "bool"
	ParamTypeDecimal ParamType = "decimal"
)

// StrategyMetrics contains strategy performance metrics
type StrategyMetrics struct {
	TotalTrades       int64           `json:"total_trades"`
	WinningTrades     int64           `json:"winning_trades"`
	LosingTrades      int64           `json:"losing_trades"`
	WinRate           decimal.Decimal `json:"win_rate"`
	TotalPnL          decimal.Decimal `json:"total_pnl"`
	RealizedPnL       decimal.Decimal `json:"realized_pnl"`
	UnrealizedPnL     decimal.Decimal `json:"unrealized_pnl"`
	MaxDrawdown       decimal.Decimal `json:"max_drawdown"`
	SharpeRatio       decimal.Decimal `json:"sharpe_ratio"`
	SortinoRatio      decimal.Decimal `json:"sortino_ratio"`
	ProfitFactor      decimal.Decimal `json:"profit_factor"`
	AvgWin            decimal.Decimal `json:"avg_win"`
	AvgLoss           decimal.Decimal `json:"avg_loss"`
	MaxWin            decimal.Decimal `json:"max_win"`
	MaxLoss           decimal.Decimal `json:"max_loss"`
	TotalVolume       decimal.Decimal `json:"total_volume"`
	TotalCommission   decimal.Decimal `json:"total_commission"`
	ActivePositions   int             `json:"active_positions"`
	OpenOrders        int             `json:"open_orders"`
	LastTradeTime     time.Time       `json:"last_trade_time"`
	StartTime         time.Time       `json:"start_time"`
	Uptime            time.Duration   `json:"uptime"`
}

// Position represents a trading position
type Position struct {
	ID            uuid.UUID       `json:"id"`
	StrategyID    uuid.UUID       `json:"strategy_id"`
	Symbol        string          `json:"symbol"`
	Side          string          `json:"side"`
	Size          decimal.Decimal `json:"size"`
	EntryPrice    decimal.Decimal `json:"entry_price"`
	CurrentPrice  decimal.Decimal `json:"current_price"`
	StopLoss      decimal.Decimal `json:"stop_loss,omitempty"`
	TakeProfit    decimal.Decimal `json:"take_profit,omitempty"`
	UnrealizedPnL decimal.Decimal `json:"unrealized_pnl"`
	RealizedPnL   decimal.Decimal `json:"realized_pnl"`
	Commission    decimal.Decimal `json:"commission"`
	OpenTime      time.Time       `json:"open_time"`
	CloseTime     time.Time       `json:"close_time,omitempty"`
	Status        PositionStatus  `json:"status"`
	Metadata      map[string]interface{} `json:"metadata"`
}

// PositionStatus represents position status
type PositionStatus string

const (
	PositionStatusOpen   PositionStatus = "open"
	PositionStatusClosed PositionStatus = "closed"
)

// Order represents a trading order
type Order struct {
	ID            uuid.UUID              `json:"id"`
	StrategyID    uuid.UUID              `json:"strategy_id"`
	ExchangeID    string                 `json:"exchange_id"`
	Symbol        string                 `json:"symbol"`
	Side          common.OrderSide       `json:"side"`
	Type          common.OrderType       `json:"type"`
	Quantity      decimal.Decimal        `json:"quantity"`
	Price         decimal.Decimal        `json:"price"`
	StopPrice     decimal.Decimal        `json:"stop_price,omitempty"`
	TimeInForce   common.TimeInForce     `json:"time_in_force"`
	Status        common.OrderStatus     `json:"status"`
	FilledQty     decimal.Decimal        `json:"filled_qty"`
	AvgFillPrice  decimal.Decimal        `json:"avg_fill_price"`
	Commission    decimal.Decimal        `json:"commission"`
	CreatedAt     time.Time              `json:"created_at"`
	UpdatedAt     time.Time              `json:"updated_at"`
	Metadata      map[string]interface{} `json:"metadata"`
}

// RiskLimits defines risk management limits for a strategy
type RiskLimits struct {
	MaxPositionSize     decimal.Decimal `json:"max_position_size"`
	MaxDailyLoss        decimal.Decimal `json:"max_daily_loss"`
	MaxDrawdown         decimal.Decimal `json:"max_drawdown"`
	MaxOpenPositions    int             `json:"max_open_positions"`
	MaxOrdersPerSecond  int             `json:"max_orders_per_second"`
	MaxOrdersPerMinute  int             `json:"max_orders_per_minute"`
	MaxOrdersPerHour    int             `json:"max_orders_per_hour"`
	MaxOrdersPerDay     int             `json:"max_orders_per_day"`
	StopLossRequired    bool            `json:"stop_loss_required"`
	TakeProfitRequired  bool            `json:"take_profit_required"`
	MaxLeverage         decimal.Decimal `json:"max_leverage"`
	AllowedSymbols      []string        `json:"allowed_symbols"`
	BlockedSymbols      []string        `json:"blocked_symbols"`
	TradingHours        *TradingHours   `json:"trading_hours,omitempty"`
}

// TradingHours defines allowed trading hours
type TradingHours struct {
	Enabled   bool      `json:"enabled"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	Timezone  string    `json:"timezone"`
	Weekdays  []int     `json:"weekdays"` // 0=Sunday, 1=Monday, etc.
}
