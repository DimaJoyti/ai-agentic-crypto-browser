version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: agentic-browser-postgres
    environment:
      POSTGRES_DB: agentic_browser
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: agentic-browser-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Observability Services
  jaeger:
    image: jaegertracing/all-in-one:1.53
    container_name: agentic-browser-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: agentic-browser-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.2.3
    container_name: agentic-browser-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    container_name: agentic-browser-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/agentic_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - AI_AGENT_URL=http://ai-agent:8082
      - BROWSER_SERVICE_URL=http://browser-service:8083
      - WEB3_SERVICE_URL=http://web3-service:8084
      - AUTH_SERVICE_URL=http://auth-service:8085
      - LOG_LEVEL=info
      - PROMETHEUS_METRICS_PORT=9090
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - default
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: .
      dockerfile: cmd/auth-service/Dockerfile
    container_name: agentic-browser-auth
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/agentic_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  ai-agent:
    build:
      context: .
      dockerfile: cmd/ai-agent/Dockerfile
    container_name: agentic-browser-ai-agent
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/agentic_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  browser-service:
    build:
      context: .
      dockerfile: cmd/browser-service/Dockerfile
    container_name: agentic-browser-service
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/agentic_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined

  web3-service:
    build:
      context: .
      dockerfile: cmd/web3-service/Dockerfile
    container_name: agentic-browser-web3
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/agentic_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: agentic-browser-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: agentic-browser-network
