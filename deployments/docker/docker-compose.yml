version: '3.8'

services:
  # AI Agent Service
  ai-agent:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    container_name: ai-agentic-crypto-browser
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - DATABASE_URL=postgres://postgres:password@postgres:5432/ai_browser?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - BROWSER_HEADLESS=true
      - BROWSER_TIMEOUT=30s
      - AI_MODEL_TIMEOUT=60s
      - MARKET_ADAPTATION_ENABLED=true
      - PATTERN_DETECTION_WINDOW=7d
      - ADAPTATION_THRESHOLD=0.7
      - REAL_TIME_ADAPTATION=true
    volumes:
      - ./configs:/app/configs:ro
      - ai_logs:/app/logs
      - ai_data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-postgres
    environment:
      - POSTGRES_DB=ai_browser
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_browser"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-redis
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ai-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ai-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - ai-agent
    networks:
      - ai-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ai-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: ai_browser
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped
    networks:
      - ai-network

  # Frontend Service
  frontend:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.frontend
    container_name: ai-frontend
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    depends_on:
      - ai-agent
    restart: unless-stopped
    networks:
      - ai-network

  # Demo Client (Optional)
  demo-client:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    container_name: ai-demo-client
    command: ["./demo-client"]
    environment:
      - AI_AGENT_URL=http://ai-agent:8080
    depends_on:
      - ai-agent
    restart: "no"
    networks:
      - ai-network

  # Market Adaptation Demo (Optional)
  market-demo:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    container_name: ai-market-demo
    command: ["./market-adaptation-demo"]
    depends_on:
      - ai-agent
    restart: "no"
    networks:
      - ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ai_logs:
    driver: local
  ai_data:
    driver: local
  rabbitmq_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
