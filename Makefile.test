# Test Makefile for AI Agentic Browser
# This file contains all test-related targets and configurations

# Go parameters
GOCMD=go
GOBUILD=$(GOCMD) build
GOCLEAN=$(GOCMD) clean
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get
GOMOD=$(GOCMD) mod
GOFMT=gofmt
GOLINT=golangci-lint

# Test parameters
TEST_TIMEOUT=300s
TEST_PARALLEL=4
COVERAGE_THRESHOLD=80
COVERAGE_FILE=coverage.out
COVERAGE_HTML=coverage.html

# Test directories
UNIT_TEST_DIRS=./internal/... ./pkg/...
INTEGRATION_TEST_DIRS=./test/integration/...
E2E_TEST_DIRS=./test/e2e/...
LOAD_TEST_DIRS=./test/performance/...

# Test tags
UNIT_TAGS=unit
INTEGRATION_TAGS=integration
E2E_TAGS=e2e
LOAD_TAGS=load
SMOKE_TAGS=smoke

# Docker compose files
DOCKER_COMPOSE_TEST=docker-compose.test.yml
DOCKER_COMPOSE_MONITORING=deployments/monitoring/docker-compose.monitoring.yml

# Test environment variables
export TEST_ENVIRONMENT=local
export TEST_USE_CONTAINERS=true
export TEST_LOG_LEVEL=info
export TEST_PARALLEL=true
export CI=false

# Colors for output
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
NC=\033[0m # No Color

.PHONY: help test test-unit test-integration test-e2e test-load test-all
.PHONY: test-coverage test-coverage-html test-coverage-report
.PHONY: test-setup test-teardown test-clean
.PHONY: test-lint test-fmt test-vet test-security
.PHONY: test-docker test-docker-build test-docker-up test-docker-down
.PHONY: test-ci test-local test-smoke
.PHONY: benchmark profile

# Default target
help: ## Show this help message
	@echo "AI Agentic Browser - Test Makefile"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Test setup and teardown
test-setup: ## Set up test environment
	@echo "$(BLUE)Setting up test environment...$(NC)"
	@mkdir -p test-reports
	@mkdir -p test-coverage
	@$(GOMOD) download
	@$(GOMOD) verify
	@echo "$(GREEN)Test environment setup complete$(NC)"

test-teardown: ## Tear down test environment
	@echo "$(BLUE)Tearing down test environment...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down -v --remove-orphans 2>/dev/null || true
	@echo "$(GREEN)Test environment teardown complete$(NC)"

test-clean: ## Clean test artifacts
	@echo "$(BLUE)Cleaning test artifacts...$(NC)"
	@rm -rf test-reports/
	@rm -rf test-coverage/
	@rm -f $(COVERAGE_FILE)
	@rm -f $(COVERAGE_HTML)
	@$(GOCLEAN) -testcache
	@echo "$(GREEN)Test artifacts cleaned$(NC)"

# Code quality checks
test-fmt: ## Format Go code
	@echo "$(BLUE)Formatting Go code...$(NC)"
	@$(GOFMT) -s -w .
	@echo "$(GREEN)Code formatting complete$(NC)"

test-vet: ## Run go vet
	@echo "$(BLUE)Running go vet...$(NC)"
	@$(GOCMD) vet ./...
	@echo "$(GREEN)Go vet complete$(NC)"

test-lint: ## Run linter
	@echo "$(BLUE)Running linter...$(NC)"
	@$(GOLINT) run --timeout=5m ./...
	@echo "$(GREEN)Linting complete$(NC)"

test-security: ## Run security checks
	@echo "$(BLUE)Running security checks...$(NC)"
	@gosec -quiet ./...
	@echo "$(GREEN)Security checks complete$(NC)"

# Unit tests
test-unit: ## Run unit tests
	@echo "$(BLUE)Running unit tests...$(NC)"
	@$(GOTEST) -v -race -timeout=$(TEST_TIMEOUT) -parallel=$(TEST_PARALLEL) \
		-tags=$(UNIT_TAGS) \
		-coverprofile=$(COVERAGE_FILE) \
		-covermode=atomic \
		$(UNIT_TEST_DIRS)
	@echo "$(GREEN)Unit tests complete$(NC)"

test-unit-short: ## Run unit tests (short mode)
	@echo "$(BLUE)Running unit tests (short mode)...$(NC)"
	@$(GOTEST) -short -race -timeout=60s -parallel=$(TEST_PARALLEL) \
		-tags=$(UNIT_TAGS) \
		$(UNIT_TEST_DIRS)
	@echo "$(GREEN)Unit tests (short) complete$(NC)"

test-unit-verbose: ## Run unit tests with verbose output
	@echo "$(BLUE)Running unit tests (verbose)...$(NC)"
	@$(GOTEST) -v -race -timeout=$(TEST_TIMEOUT) -parallel=$(TEST_PARALLEL) \
		-tags=$(UNIT_TAGS) \
		-coverprofile=$(COVERAGE_FILE) \
		-covermode=atomic \
		$(UNIT_TEST_DIRS) | tee test-reports/unit-tests.log
	@echo "$(GREEN)Unit tests (verbose) complete$(NC)"

# Integration tests
test-integration: test-setup ## Run integration tests
	@echo "$(BLUE)Running integration tests...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) up -d postgres redis
	@sleep 10 # Wait for services to be ready
	@$(GOTEST) -v -timeout=$(TEST_TIMEOUT) -parallel=2 \
		-tags=$(INTEGRATION_TAGS) \
		$(INTEGRATION_TEST_DIRS) || (docker-compose -f $(DOCKER_COMPOSE_TEST) down && exit 1)
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down
	@echo "$(GREEN)Integration tests complete$(NC)"

# E2E tests
test-e2e: test-setup ## Run end-to-end tests
	@echo "$(BLUE)Running E2E tests...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) up -d
	@sleep 30 # Wait for all services to be ready
	@$(GOTEST) -v -timeout=600s -parallel=1 \
		-tags=$(E2E_TAGS) \
		$(E2E_TEST_DIRS) || (docker-compose -f $(DOCKER_COMPOSE_TEST) down && exit 1)
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down
	@echo "$(GREEN)E2E tests complete$(NC)"

# Load tests
test-load: test-setup ## Run load tests
	@echo "$(BLUE)Running load tests...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) up -d
	@sleep 30 # Wait for all services to be ready
	@$(GOTEST) -v -timeout=900s \
		-tags=$(LOAD_TAGS) \
		$(LOAD_TEST_DIRS) || (docker-compose -f $(DOCKER_COMPOSE_TEST) down && exit 1)
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down
	@echo "$(GREEN)Load tests complete$(NC)"

# Smoke tests
test-smoke: test-setup ## Run smoke tests
	@echo "$(BLUE)Running smoke tests...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) up -d
	@sleep 20 # Wait for services to be ready
	@$(GOTEST) -v -timeout=120s \
		-tags=$(SMOKE_TAGS) \
		./test/smoke/... || (docker-compose -f $(DOCKER_COMPOSE_TEST) down && exit 1)
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down
	@echo "$(GREEN)Smoke tests complete$(NC)"

# Comprehensive test suites
test-all: test-fmt test-vet test-lint test-unit test-integration test-e2e ## Run all tests
	@echo "$(GREEN)All tests complete$(NC)"

test-ci: test-fmt test-vet test-lint test-unit test-integration test-smoke ## Run CI test suite
	@echo "$(GREEN)CI test suite complete$(NC)"

test-local: test-unit test-integration ## Run local development test suite
	@echo "$(GREEN)Local test suite complete$(NC)"

# Coverage reporting
test-coverage: test-unit ## Generate test coverage report
	@echo "$(BLUE)Generating coverage report...$(NC)"
	@$(GOCMD) tool cover -func=$(COVERAGE_FILE)
	@$(GOCMD) tool cover -html=$(COVERAGE_FILE) -o $(COVERAGE_HTML)
	@echo "$(GREEN)Coverage report generated: $(COVERAGE_HTML)$(NC)"

test-coverage-html: test-coverage ## Open coverage report in browser
	@echo "$(BLUE)Opening coverage report in browser...$(NC)"
	@open $(COVERAGE_HTML) || xdg-open $(COVERAGE_HTML) || echo "Please open $(COVERAGE_HTML) manually"

test-coverage-report: test-coverage ## Generate detailed coverage report
	@echo "$(BLUE)Generating detailed coverage report...$(NC)"
	@mkdir -p test-reports
	@$(GOCMD) tool cover -func=$(COVERAGE_FILE) > test-reports/coverage.txt
	@$(GOCMD) tool cover -html=$(COVERAGE_FILE) -o test-reports/coverage.html
	@echo "Coverage threshold: $(COVERAGE_THRESHOLD)%"
	@COVERAGE=$$($(GOCMD) tool cover -func=$(COVERAGE_FILE) | grep total | awk '{print $$3}' | sed 's/%//'); \
	if [ $$(echo "$$COVERAGE < $(COVERAGE_THRESHOLD)" | bc -l) -eq 1 ]; then \
		echo "$(RED)Coverage $$COVERAGE% is below threshold $(COVERAGE_THRESHOLD)%$(NC)"; \
		exit 1; \
	else \
		echo "$(GREEN)Coverage $$COVERAGE% meets threshold $(COVERAGE_THRESHOLD)%$(NC)"; \
	fi

# Benchmarking
benchmark: ## Run benchmark tests
	@echo "$(BLUE)Running benchmark tests...$(NC)"
	@$(GOTEST) -bench=. -benchmem -timeout=$(TEST_TIMEOUT) \
		-run=^$$ \
		$(UNIT_TEST_DIRS) | tee test-reports/benchmark.txt
	@echo "$(GREEN)Benchmark tests complete$(NC)"

benchmark-compare: ## Compare benchmark results
	@echo "$(BLUE)Comparing benchmark results...$(NC)"
	@if [ -f test-reports/benchmark-baseline.txt ]; then \
		benchcmp test-reports/benchmark-baseline.txt test-reports/benchmark.txt; \
	else \
		echo "$(YELLOW)No baseline benchmark found. Current results saved as baseline.$(NC)"; \
		cp test-reports/benchmark.txt test-reports/benchmark-baseline.txt; \
	fi

# Profiling
profile-cpu: ## Run CPU profiling
	@echo "$(BLUE)Running CPU profiling...$(NC)"
	@$(GOTEST) -cpuprofile=test-reports/cpu.prof -bench=. -run=^$$ $(UNIT_TEST_DIRS)
	@$(GOCMD) tool pprof -http=:8080 test-reports/cpu.prof

profile-mem: ## Run memory profiling
	@echo "$(BLUE)Running memory profiling...$(NC)"
	@$(GOTEST) -memprofile=test-reports/mem.prof -bench=. -run=^$$ $(UNIT_TEST_DIRS)
	@$(GOCMD) tool pprof -http=:8080 test-reports/mem.prof

# Docker-based testing
test-docker-build: ## Build test Docker images
	@echo "$(BLUE)Building test Docker images...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) build
	@echo "$(GREEN)Test Docker images built$(NC)"

test-docker-up: ## Start test Docker environment
	@echo "$(BLUE)Starting test Docker environment...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) up -d
	@echo "$(GREEN)Test Docker environment started$(NC)"

test-docker-down: ## Stop test Docker environment
	@echo "$(BLUE)Stopping test Docker environment...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_TEST) down -v --remove-orphans
	@echo "$(GREEN)Test Docker environment stopped$(NC)"

test-docker: test-docker-build test-docker-up ## Run tests in Docker environment
	@echo "$(BLUE)Running tests in Docker environment...$(NC)"
	@sleep 30 # Wait for services to be ready
	@docker-compose -f $(DOCKER_COMPOSE_TEST) exec -T app make test-ci
	@$(MAKE) test-docker-down

# Test monitoring
test-monitor: ## Start test monitoring stack
	@echo "$(BLUE)Starting test monitoring stack...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_MONITORING) up -d prometheus grafana
	@echo "$(GREEN)Test monitoring stack started$(NC)"
	@echo "Prometheus: http://localhost:9090"
	@echo "Grafana: http://localhost:3000 (admin/admin123)"

test-monitor-down: ## Stop test monitoring stack
	@echo "$(BLUE)Stopping test monitoring stack...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_MONITORING) down
	@echo "$(GREEN)Test monitoring stack stopped$(NC)"

# Test data management
test-data-setup: ## Set up test data
	@echo "$(BLUE)Setting up test data...$(NC)"
	@$(GOCMD) run scripts/setup-test-data.go
	@echo "$(GREEN)Test data setup complete$(NC)"

test-data-cleanup: ## Clean up test data
	@echo "$(BLUE)Cleaning up test data...$(NC)"
	@$(GOCMD) run scripts/cleanup-test-data.go
	@echo "$(GREEN)Test data cleanup complete$(NC)"

# Continuous testing
test-watch: ## Run tests in watch mode
	@echo "$(BLUE)Starting test watch mode...$(NC)"
	@which fswatch > /dev/null || (echo "$(RED)fswatch not found. Install with: brew install fswatch$(NC)" && exit 1)
	@fswatch -o . -e ".*" -i "\\.go$$" | xargs -n1 -I{} make test-unit-short

# Test reporting
test-report: ## Generate comprehensive test report
	@echo "$(BLUE)Generating comprehensive test report...$(NC)"
	@mkdir -p test-reports
	@echo "# AI Agentic Browser Test Report" > test-reports/README.md
	@echo "Generated on: $$(date)" >> test-reports/README.md
	@echo "" >> test-reports/README.md
	@echo "## Test Results" >> test-reports/README.md
	@echo "- Unit Tests: See unit-tests.log" >> test-reports/README.md
	@echo "- Integration Tests: See integration-tests.log" >> test-reports/README.md
	@echo "- E2E Tests: See e2e-tests.log" >> test-reports/README.md
	@echo "- Coverage Report: See coverage.html" >> test-reports/README.md
	@echo "- Benchmark Results: See benchmark.txt" >> test-reports/README.md
	@echo "$(GREEN)Test report generated in test-reports/$(NC)"

# Help for specific test types
test-help-unit: ## Show help for unit tests
	@echo "Unit Test Help:"
	@echo "  make test-unit         - Run all unit tests"
	@echo "  make test-unit-short   - Run unit tests in short mode"
	@echo "  make test-unit-verbose - Run unit tests with verbose output"
	@echo ""
	@echo "Environment variables:"
	@echo "  TEST_TIMEOUT=$(TEST_TIMEOUT)"
	@echo "  TEST_PARALLEL=$(TEST_PARALLEL)"

test-help-integration: ## Show help for integration tests
	@echo "Integration Test Help:"
	@echo "  make test-integration - Run integration tests"
	@echo ""
	@echo "Requirements:"
	@echo "  - Docker and docker-compose"
	@echo "  - PostgreSQL and Redis containers"

test-help-e2e: ## Show help for E2E tests
	@echo "E2E Test Help:"
	@echo "  make test-e2e - Run end-to-end tests"
	@echo ""
	@echo "Requirements:"
	@echo "  - Full application stack running"
	@echo "  - Chrome/Chromium browser"
	@echo "  - Frontend application accessible"

# Quick test commands
quick-test: test-unit-short ## Quick test for development
	@echo "$(GREEN)Quick test complete$(NC)"

full-test: test-all test-coverage-report ## Full test suite with coverage
	@echo "$(GREEN)Full test suite complete$(NC)"
